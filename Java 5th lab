package cnfd;
class Thread1 extends Thread {
    @Override
    public void run() {
        // Thread1 generates numbers from 1 to 5
        for (int i = 1; i <= 5; i++) {
            System.out.println("Thread1: " + i);
            try {
                // Sleep for 2 seconds
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                System.out.println("Thread1 interrupted.");
                return;
            }
            // Yield control to other threads
            Thread.yield();
        }
        System.out.println("Thread1 completed.");
    }
}

class Thread2 extends Thread {
    @Override
    public void run() {
        // Thread2 generates numbers from 10 to 15
        for (int i = 10; i <= 15; i++) {
            System.out.println("Thread2: " + i);
            try {
                // Sleep for 2 seconds
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                System.out.println("Thread2 interrupted.");
                return;
            }
            // Yield control to other threads
            Thread.yield();
        }
        System.out.println("Thread2 completed.");
    }
}

public class ThreadLifeCycleDemo {
    public static void main(String[] args) {
        // Create instances of Thread1 and Thread2
        Thread1 thread1 = new Thread1();
        Thread2 thread2 = new Thread2();

        // Set priorities
        thread1.setPriority(Thread.MAX_PRIORITY); // Highest priority
        thread2.setPriority(Thread.MIN_PRIORITY); // Lowest priority

        // Start both threads
        thread1.start();
        thread2.start();

        // Wait for both threads to complete
        try {
            thread1.join(3000); // Wait for thread1 to finish for 3 seconds max
            thread2.join();     // Wait for thread2 to finish indefinitely

            if (thread1.isAlive()) {
                System.out.println("Interrupting Thread1 as it is taking too long.");
                thread1.interrupt();
            }
        } catch (InterruptedException e) {
            System.out.println("Main thread interrupted.");
        }

        System.out.println("All threads completed.");
    }
}
